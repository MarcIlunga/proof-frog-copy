# Generated from proof_frog/antlr/Game.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,58,365,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,1,0,1,
        0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,
        8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,
        1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,
        1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,
        1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,
        1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,32,1,32,1,32,
        1,32,1,32,1,32,1,32,1,33,1,33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,
        1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,
        1,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,37,1,37,
        1,37,1,37,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,39,1,39,1,39,1,39,
        1,40,1,40,1,40,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,43,
        1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,
        1,45,1,46,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,50,
        1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,51,1,51,1,52,1,52,1,52,
        1,52,4,52,319,8,52,11,52,12,52,320,1,53,4,53,324,8,53,11,53,12,53,
        325,1,54,1,54,5,54,330,8,54,10,54,12,54,333,9,54,1,55,4,55,336,8,
        55,11,55,12,55,337,1,55,1,55,1,56,1,56,1,56,1,56,5,56,346,8,56,10,
        56,12,56,349,9,56,1,56,3,56,352,8,56,1,56,1,56,1,56,1,56,1,57,1,
        57,4,57,360,8,57,11,57,12,57,361,1,57,1,57,1,347,0,58,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
        75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,
        97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,
        58,1,0,6,1,0,48,49,1,0,48,57,4,0,36,36,65,90,95,95,97,122,5,0,36,
        36,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,7,0,32,32,36,36,
        46,57,60,62,65,90,95,95,97,122,371,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,
        0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,
        0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,
        0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,
        0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,
        0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,
        0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,
        0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,
        0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,
        0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,
        0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,
        1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,
        0,115,1,0,0,0,1,117,1,0,0,0,3,119,1,0,0,0,5,121,1,0,0,0,7,123,1,
        0,0,0,9,125,1,0,0,0,11,127,1,0,0,0,13,129,1,0,0,0,15,131,1,0,0,0,
        17,133,1,0,0,0,19,135,1,0,0,0,21,137,1,0,0,0,23,139,1,0,0,0,25,141,
        1,0,0,0,27,143,1,0,0,0,29,145,1,0,0,0,31,147,1,0,0,0,33,149,1,0,
        0,0,35,151,1,0,0,0,37,153,1,0,0,0,39,156,1,0,0,0,41,159,1,0,0,0,
        43,162,1,0,0,0,45,165,1,0,0,0,47,168,1,0,0,0,49,171,1,0,0,0,51,174,
        1,0,0,0,53,176,1,0,0,0,55,178,1,0,0,0,57,180,1,0,0,0,59,184,1,0,
        0,0,61,189,1,0,0,0,63,193,1,0,0,0,65,197,1,0,0,0,67,204,1,0,0,0,
        69,211,1,0,0,0,71,221,1,0,0,0,73,227,1,0,0,0,75,237,1,0,0,0,77,245,
        1,0,0,0,79,248,1,0,0,0,81,252,1,0,0,0,83,255,1,0,0,0,85,258,1,0,
        0,0,87,264,1,0,0,0,89,269,1,0,0,0,91,276,1,0,0,0,93,279,1,0,0,0,
        95,285,1,0,0,0,97,293,1,0,0,0,99,298,1,0,0,0,101,303,1,0,0,0,103,
        308,1,0,0,0,105,314,1,0,0,0,107,323,1,0,0,0,109,327,1,0,0,0,111,
        335,1,0,0,0,113,341,1,0,0,0,115,357,1,0,0,0,117,118,5,123,0,0,118,
        2,1,0,0,0,119,120,5,125,0,0,120,4,1,0,0,0,121,122,5,91,0,0,122,6,
        1,0,0,0,123,124,5,93,0,0,124,8,1,0,0,0,125,126,5,40,0,0,126,10,1,
        0,0,0,127,128,5,41,0,0,128,12,1,0,0,0,129,130,5,60,0,0,130,14,1,
        0,0,0,131,132,5,62,0,0,132,16,1,0,0,0,133,134,5,59,0,0,134,18,1,
        0,0,0,135,136,5,58,0,0,136,20,1,0,0,0,137,138,5,44,0,0,138,22,1,
        0,0,0,139,140,5,46,0,0,140,24,1,0,0,0,141,142,5,42,0,0,142,26,1,
        0,0,0,143,144,5,61,0,0,144,28,1,0,0,0,145,146,5,43,0,0,146,30,1,
        0,0,0,147,148,5,45,0,0,148,32,1,0,0,0,149,150,5,47,0,0,150,34,1,
        0,0,0,151,152,5,63,0,0,152,36,1,0,0,0,153,154,5,61,0,0,154,155,5,
        61,0,0,155,38,1,0,0,0,156,157,5,33,0,0,157,158,5,61,0,0,158,40,1,
        0,0,0,159,160,5,62,0,0,160,161,5,61,0,0,161,42,1,0,0,0,162,163,5,
        60,0,0,163,164,5,61,0,0,164,44,1,0,0,0,165,166,5,124,0,0,166,167,
        5,124,0,0,167,46,1,0,0,0,168,169,5,60,0,0,169,170,5,45,0,0,170,48,
        1,0,0,0,171,172,5,38,0,0,172,173,5,38,0,0,173,50,1,0,0,0,174,175,
        5,92,0,0,175,52,1,0,0,0,176,177,5,33,0,0,177,54,1,0,0,0,178,179,
        5,124,0,0,179,56,1,0,0,0,180,181,5,83,0,0,181,182,5,101,0,0,182,
        183,5,116,0,0,183,58,1,0,0,0,184,185,5,66,0,0,185,186,5,111,0,0,
        186,187,5,111,0,0,187,188,5,108,0,0,188,60,1,0,0,0,189,190,5,73,
        0,0,190,191,5,110,0,0,191,192,5,116,0,0,192,62,1,0,0,0,193,194,5,
        77,0,0,194,195,5,97,0,0,195,196,5,112,0,0,196,64,1,0,0,0,197,198,
        5,114,0,0,198,199,5,101,0,0,199,200,5,116,0,0,200,201,5,117,0,0,
        201,202,5,114,0,0,202,203,5,110,0,0,203,66,1,0,0,0,204,205,5,105,
        0,0,205,206,5,109,0,0,206,207,5,112,0,0,207,208,5,111,0,0,208,209,
        5,114,0,0,209,210,5,116,0,0,210,68,1,0,0,0,211,212,5,66,0,0,212,
        213,5,105,0,0,213,214,5,116,0,0,214,215,5,83,0,0,215,216,5,116,0,
        0,216,217,5,114,0,0,217,218,5,105,0,0,218,219,5,110,0,0,219,220,
        5,103,0,0,220,70,1,0,0,0,221,222,5,65,0,0,222,223,5,114,0,0,223,
        224,5,114,0,0,224,225,5,97,0,0,225,226,5,121,0,0,226,72,1,0,0,0,
        227,228,5,80,0,0,228,229,5,114,0,0,229,230,5,105,0,0,230,231,5,109,
        0,0,231,232,5,105,0,0,232,233,5,116,0,0,233,234,5,105,0,0,234,235,
        5,118,0,0,235,236,5,101,0,0,236,74,1,0,0,0,237,238,5,115,0,0,238,
        239,5,117,0,0,239,240,5,98,0,0,240,241,5,115,0,0,241,242,5,101,0,
        0,242,243,5,116,0,0,243,244,5,115,0,0,244,76,1,0,0,0,245,246,5,105,
        0,0,246,247,5,102,0,0,247,78,1,0,0,0,248,249,5,102,0,0,249,250,5,
        111,0,0,250,251,5,114,0,0,251,80,1,0,0,0,252,253,5,116,0,0,253,254,
        5,111,0,0,254,82,1,0,0,0,255,256,5,105,0,0,256,257,5,110,0,0,257,
        84,1,0,0,0,258,259,5,117,0,0,259,260,5,110,0,0,260,261,5,105,0,0,
        261,262,5,111,0,0,262,263,5,110,0,0,263,86,1,0,0,0,264,265,5,71,
        0,0,265,266,5,97,0,0,266,267,5,109,0,0,267,268,5,101,0,0,268,88,
        1,0,0,0,269,270,5,101,0,0,270,271,5,120,0,0,271,272,5,112,0,0,272,
        273,5,111,0,0,273,274,5,114,0,0,274,275,5,116,0,0,275,90,1,0,0,0,
        276,277,5,97,0,0,277,278,5,115,0,0,278,92,1,0,0,0,279,280,5,80,0,
        0,280,281,5,104,0,0,281,282,5,97,0,0,282,283,5,115,0,0,283,284,5,
        101,0,0,284,94,1,0,0,0,285,286,5,111,0,0,286,287,5,114,0,0,287,288,
        5,97,0,0,288,289,5,99,0,0,289,290,5,108,0,0,290,291,5,101,0,0,291,
        292,5,115,0,0,292,96,1,0,0,0,293,294,5,101,0,0,294,295,5,108,0,0,
        295,296,5,115,0,0,296,297,5,101,0,0,297,98,1,0,0,0,298,299,5,78,
        0,0,299,300,5,111,0,0,300,301,5,110,0,0,301,302,5,101,0,0,302,100,
        1,0,0,0,303,304,5,116,0,0,304,305,5,114,0,0,305,306,5,117,0,0,306,
        307,5,101,0,0,307,102,1,0,0,0,308,309,5,102,0,0,309,310,5,97,0,0,
        310,311,5,108,0,0,311,312,5,115,0,0,312,313,5,101,0,0,313,104,1,
        0,0,0,314,315,5,48,0,0,315,316,5,98,0,0,316,318,1,0,0,0,317,319,
        7,0,0,0,318,317,1,0,0,0,319,320,1,0,0,0,320,318,1,0,0,0,320,321,
        1,0,0,0,321,106,1,0,0,0,322,324,7,1,0,0,323,322,1,0,0,0,324,325,
        1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,108,1,0,0,0,327,331,
        7,2,0,0,328,330,7,3,0,0,329,328,1,0,0,0,330,333,1,0,0,0,331,329,
        1,0,0,0,331,332,1,0,0,0,332,110,1,0,0,0,333,331,1,0,0,0,334,336,
        7,4,0,0,335,334,1,0,0,0,336,337,1,0,0,0,337,335,1,0,0,0,337,338,
        1,0,0,0,338,339,1,0,0,0,339,340,6,55,0,0,340,112,1,0,0,0,341,342,
        5,47,0,0,342,343,5,47,0,0,343,347,1,0,0,0,344,346,9,0,0,0,345,344,
        1,0,0,0,346,349,1,0,0,0,347,348,1,0,0,0,347,345,1,0,0,0,348,351,
        1,0,0,0,349,347,1,0,0,0,350,352,5,13,0,0,351,350,1,0,0,0,351,352,
        1,0,0,0,352,353,1,0,0,0,353,354,5,10,0,0,354,355,1,0,0,0,355,356,
        6,56,0,0,356,114,1,0,0,0,357,359,5,39,0,0,358,360,7,5,0,0,359,358,
        1,0,0,0,360,361,1,0,0,0,361,359,1,0,0,0,361,362,1,0,0,0,362,363,
        1,0,0,0,363,364,5,39,0,0,364,116,1,0,0,0,8,0,320,325,331,337,347,
        351,361,1,6,0,0
    ]

class GameLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    L_CURLY = 1
    R_CURLY = 2
    L_SQUARE = 3
    R_SQUARE = 4
    L_PAREN = 5
    R_PAREN = 6
    L_ANGLE = 7
    R_ANGLE = 8
    SEMI = 9
    COLON = 10
    COMMA = 11
    PERIOD = 12
    TIMES = 13
    EQUALS = 14
    PLUS = 15
    SUBTRACT = 16
    DIVIDE = 17
    QUESTION = 18
    EQUALSCOMPARE = 19
    NOTEQUALS = 20
    GEQ = 21
    LEQ = 22
    OR = 23
    SAMPLES = 24
    AND = 25
    BACKSLASH = 26
    NOT = 27
    VBAR = 28
    SET = 29
    BOOL = 30
    INTTYPE = 31
    MAP = 32
    RETURN = 33
    IMPORT = 34
    BITSTRING = 35
    ARRAY = 36
    PRIMITIVE = 37
    SUBSETS = 38
    IF = 39
    FOR = 40
    TO = 41
    IN = 42
    UNION = 43
    GAME = 44
    EXPORT = 45
    AS = 46
    PHASE = 47
    ORACLES = 48
    ELSE = 49
    NONE = 50
    TRUE = 51
    FALSE = 52
    BINARYNUM = 53
    INT = 54
    ID = 55
    WS = 56
    LINE_COMMENT = 57
    FILESTRING = 58

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'{'", "'}'", "'['", "']'", "'('", "')'", "'<'", "'>'", "';'", 
            "':'", "','", "'.'", "'*'", "'='", "'+'", "'-'", "'/'", "'?'", 
            "'=='", "'!='", "'>='", "'<='", "'||'", "'<-'", "'&&'", "'\\'", 
            "'!'", "'|'", "'Set'", "'Bool'", "'Int'", "'Map'", "'return'", 
            "'import'", "'BitString'", "'Array'", "'Primitive'", "'subsets'", 
            "'if'", "'for'", "'to'", "'in'", "'union'", "'Game'", "'export'", 
            "'as'", "'Phase'", "'oracles'", "'else'", "'None'", "'true'", 
            "'false'" ]

    symbolicNames = [ "<INVALID>",
            "L_CURLY", "R_CURLY", "L_SQUARE", "R_SQUARE", "L_PAREN", "R_PAREN", 
            "L_ANGLE", "R_ANGLE", "SEMI", "COLON", "COMMA", "PERIOD", "TIMES", 
            "EQUALS", "PLUS", "SUBTRACT", "DIVIDE", "QUESTION", "EQUALSCOMPARE", 
            "NOTEQUALS", "GEQ", "LEQ", "OR", "SAMPLES", "AND", "BACKSLASH", 
            "NOT", "VBAR", "SET", "BOOL", "INTTYPE", "MAP", "RETURN", "IMPORT", 
            "BITSTRING", "ARRAY", "PRIMITIVE", "SUBSETS", "IF", "FOR", "TO", 
            "IN", "UNION", "GAME", "EXPORT", "AS", "PHASE", "ORACLES", "ELSE", 
            "NONE", "TRUE", "FALSE", "BINARYNUM", "INT", "ID", "WS", "LINE_COMMENT", 
            "FILESTRING" ]

    ruleNames = [ "L_CURLY", "R_CURLY", "L_SQUARE", "R_SQUARE", "L_PAREN", 
                  "R_PAREN", "L_ANGLE", "R_ANGLE", "SEMI", "COLON", "COMMA", 
                  "PERIOD", "TIMES", "EQUALS", "PLUS", "SUBTRACT", "DIVIDE", 
                  "QUESTION", "EQUALSCOMPARE", "NOTEQUALS", "GEQ", "LEQ", 
                  "OR", "SAMPLES", "AND", "BACKSLASH", "NOT", "VBAR", "SET", 
                  "BOOL", "INTTYPE", "MAP", "RETURN", "IMPORT", "BITSTRING", 
                  "ARRAY", "PRIMITIVE", "SUBSETS", "IF", "FOR", "TO", "IN", 
                  "UNION", "GAME", "EXPORT", "AS", "PHASE", "ORACLES", "ELSE", 
                  "NONE", "TRUE", "FALSE", "BINARYNUM", "INT", "ID", "WS", 
                  "LINE_COMMENT", "FILESTRING" ]

    grammarFileName = "Game.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


